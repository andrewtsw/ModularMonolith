using AutoMapper;
using TCO.SNT.Common.Extensions;
using TCO.SNT.UseCases.Balances.Commands.Shared;
using TCO.SNT.UseCases.Balances.Commands.ValidateBalances;
using TCO.SNT.UseCases.Balances.Queries.GetBalances;
using VsSdk.VstoreBalance;

namespace TCO.SNT.UseCases.Balances.Mapping
{
    internal class BalanceMappingProfile : Profile
    {
        public BalanceMappingProfile()
        {
            CreateMap<Entities.Balance, BalanceSimpleDto>()
               .ForMember(dest => dest.TaxpayerStoreName, opt => opt.MapFrom(src => src.TaxpayerStore.StoreName))
               .ForMember(dest => dest.MeasureUnitName, opt => opt.MapFrom(src => src.MeasureUnit.NameRu));

            CreateMap<BalanceGroupingKey, Entities.Balance>()
                // Ignore Id because it generated by the DB
                .ForMember(dest => dest.Id, opt => opt.Ignore())
                // Ignore navigation properties
                .ForMember(dest => dest.TaxpayerStore, opt => opt.Ignore())
                .ForMember(dest => dest.TaxpayerStoreId, opt => opt.Ignore())
                .ForMember(dest => dest.MeasureUnit, opt => opt.Ignore())
                .ForMember(dest => dest.MeasureUnitId, opt => opt.Ignore())
                // Map external keys
                .ForMember(dest => dest.ExternalTaxpayerStoreId, opt => opt.MapFrom(src => src.TaxpayerStoreId))
                .ForMember(dest => dest.ExternalMeasureUnitCode, opt => opt.MapFrom(src => src.MeasureUnitCode))
                // Ignore calculated properties
                .ForMember(dest => dest.Quantity, opt => opt.Ignore())
                .ForMember(dest => dest.ReserveQuantity, opt => opt.Ignore())
                // Ignore properties out of the key
                .ForMember(dest => dest.ProjectCode, opt => opt.Ignore())
                .ForMember(dest => dest.CanExport, opt => opt.Ignore())
                .ForMember(dest => dest.IsActive, opt => opt.Ignore());

            CreateMap<Balance, BalanceGroupingKey>()
                .ForMember(dest => dest.Name,
                    opt => opt.MapFrom(src => src.name.Truncate(Entities.Balance.NameMaxLen)))
                .ForMember(dest => dest.SpiritPercent,
                    opt => opt.MapFrom(src => src.spiritPercentSpecified ? src.spiritPercent : (decimal?)null))
                .ForMember(dest => dest.DutyType,
                    opt => opt.MapFrom(src => src.dutyTypeSpecified ? (Entities.BalanceDutyType)src.dutyType : (Entities.BalanceDutyType?)null));

            CreateMap<Entities.Balance, BalanceGroupingKey>()
                .ForMember(dest => dest.TaxpayerStoreId, opt => opt.MapFrom(src => src.ExternalTaxpayerStoreId))
                .ForMember(dest => dest.MeasureUnitCode, opt => opt.MapFrom(src => src.ExternalMeasureUnitCode));

            CreateMap<BalanceDto, BalanceGroupingKey>()
                .ForMember(dest => dest.TaxpayerStoreId, opt => opt.MapFrom(src => src.StoreId));
        }
    }
}
