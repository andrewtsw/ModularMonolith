using AutoMapper;
using TCO.SNT.Common.Extensions;
using VsSdk.VstoreBalance;

namespace TCO.SNT.UseCases.Balances.Commands.FixBalancesImportKey
{
    /// <summary>
    /// This fix should be removed after single run on production
    /// </summary>
    internal class FixBalancesMappingProfile : Profile
    {
        public FixBalancesMappingProfile()
        {
            CreateMap<FixBalanceGroupingKey, Entities.Balance>()
                // Ignore Id because it generated by the DB
                .ForMember(dest => dest.Id, opt => opt.Ignore())
                // Ignore navigation properties
                .ForMember(dest => dest.TaxpayerStore, opt => opt.Ignore())
                .ForMember(dest => dest.TaxpayerStoreId, opt => opt.Ignore())
                .ForMember(dest => dest.MeasureUnit, opt => opt.Ignore())
                .ForMember(dest => dest.MeasureUnitId, opt => opt.Ignore())
                // Map external keys
                .ForMember(dest => dest.ExternalTaxpayerStoreId, opt => opt.MapFrom(src => src.TaxpayerStoreId))
                .ForMember(dest => dest.ExternalMeasureUnitCode, opt => opt.MapFrom(src => src.MeasureUnitCode))
                // Ignore calculated properties
                .ForMember(dest => dest.Quantity, opt => opt.Ignore())
                .ForMember(dest => dest.ReserveQuantity, opt => opt.Ignore())
                // Ignore properties out of the key
                .ForMember(dest => dest.ProjectCode, opt => opt.Ignore())
                .ForMember(dest => dest.CanExport, opt => opt.Ignore())
                .ForMember(dest => dest.IsActive, opt => opt.Ignore())
                // Ignore new properties
                .ForMember(dest => dest.CountryCode, opt => opt.Ignore())
                .ForMember(dest => dest.DutyType, opt => opt.Ignore());
                

            CreateMap<Balance, FixBalanceGroupingKey>()
                .ForMember(dest => dest.Name,
                    opt => opt.MapFrom(src => src.name.Truncate(Entities.Balance.NameMaxLen)))
                .ForMember(dest => dest.SpiritPercent,
                    opt => opt.MapFrom(src => src.spiritPercentSpecified ? src.spiritPercent : (decimal?)null));

            CreateMap<Entities.Balance, FixBalanceGroupingKey>()
                .ForMember(dest => dest.TaxpayerStoreId, opt => opt.MapFrom(src => src.ExternalTaxpayerStoreId))
                .ForMember(dest => dest.MeasureUnitCode, opt => opt.MapFrom(src => src.ExternalMeasureUnitCode));
        }
    }
}
