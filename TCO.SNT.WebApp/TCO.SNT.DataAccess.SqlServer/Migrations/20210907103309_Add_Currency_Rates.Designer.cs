// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TCO.SNT.DataAccess.SqlServer;

namespace TCO.SNT.DataAccess.SqlServer.Migrations
{
    [DbContext(typeof(SqlServerDbContext))]
    [Migration("20210907103309_Add_Currency_Rates")]
    partial class Add_Currency_Rates
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TCO.SNT.Entities.Balance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanExport")
                        .HasColumnType("bit");

                    b.Property<string>("ExternalMeasureUnitCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ExternalTaxpayerStoreId")
                        .HasColumnType("bigint");

                    b.Property<string>("GtinCode")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("KpvedCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("ManufactureOrImportDocNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MeasureUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("PhysicalLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PinCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductNameInImportDoc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductNumberInImportDoc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProjectCode")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("ReserveQuantity")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("SpiritPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TaxpayerStoreId")
                        .HasColumnType("int");

                    b.Property<string>("Tin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TnvedCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("GtinCode");

                    b.HasIndex("KpvedCode");

                    b.HasIndex("MeasureUnitId");

                    b.HasIndex("Name");

                    b.HasIndex("ProductId");

                    b.HasIndex("Quantity");

                    b.HasIndex("ReserveQuantity");

                    b.HasIndex("TaxpayerStoreId");

                    b.HasIndex("TnvedCode");

                    b.HasIndex("UnitPrice");

                    b.ToTable("Balances");
                });

            modelBuilder.Entity("TCO.SNT.Entities.Currency", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(3)")
                        .HasMaxLength(3);

                    b.Property<decimal?>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Code");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Code = "KZT"
                        },
                        new
                        {
                            Code = "LYD"
                        },
                        new
                        {
                            Code = "CYP"
                        },
                        new
                        {
                            Code = "MRO"
                        },
                        new
                        {
                            Code = "PAB"
                        },
                        new
                        {
                            Code = "LAK"
                        },
                        new
                        {
                            Code = "DEM"
                        },
                        new
                        {
                            Code = "TMT"
                        },
                        new
                        {
                            Code = "IDR"
                        },
                        new
                        {
                            Code = "SCR"
                        },
                        new
                        {
                            Code = "YER"
                        },
                        new
                        {
                            Code = "AUD"
                        },
                        new
                        {
                            Code = "XCD"
                        },
                        new
                        {
                            Code = "AZM"
                        },
                        new
                        {
                            Code = "ADP"
                        },
                        new
                        {
                            Code = "SHP"
                        },
                        new
                        {
                            Code = "ZAR"
                        },
                        new
                        {
                            Code = "RSD"
                        },
                        new
                        {
                            Code = "CHF"
                        },
                        new
                        {
                            Code = "CZK"
                        },
                        new
                        {
                            Code = "HNL"
                        },
                        new
                        {
                            Code = "LUF"
                        },
                        new
                        {
                            Code = "ANG"
                        },
                        new
                        {
                            Code = "RON"
                        },
                        new
                        {
                            Code = "GBP"
                        },
                        new
                        {
                            Code = "ESP"
                        },
                        new
                        {
                            Code = "BHD"
                        },
                        new
                        {
                            Code = "FJD"
                        },
                        new
                        {
                            Code = "LRD"
                        },
                        new
                        {
                            Code = "SZL"
                        },
                        new
                        {
                            Code = "XEU"
                        },
                        new
                        {
                            Code = "TRY"
                        },
                        new
                        {
                            Code = "UZS"
                        },
                        new
                        {
                            Code = "BOB"
                        },
                        new
                        {
                            Code = "BYR"
                        },
                        new
                        {
                            Code = "INR"
                        },
                        new
                        {
                            Code = "NZD"
                        },
                        new
                        {
                            Code = "STD"
                        },
                        new
                        {
                            Code = "ZWL"
                        },
                        new
                        {
                            Code = "TTD"
                        },
                        new
                        {
                            Code = "WST"
                        },
                        new
                        {
                            Code = "SEK"
                        },
                        new
                        {
                            Code = "EEK"
                        },
                        new
                        {
                            Code = "HRK"
                        },
                        new
                        {
                            Code = "FKP"
                        },
                        new
                        {
                            Code = "GNF"
                        },
                        new
                        {
                            Code = "IRR"
                        },
                        new
                        {
                            Code = "NGN"
                        },
                        new
                        {
                            Code = "GWP"
                        },
                        new
                        {
                            Code = "UGS"
                        },
                        new
                        {
                            Code = "YUN"
                        },
                        new
                        {
                            Code = "BND"
                        },
                        new
                        {
                            Code = "SYP"
                        },
                        new
                        {
                            Code = "USD"
                        },
                        new
                        {
                            Code = "NOK"
                        },
                        new
                        {
                            Code = "CRC"
                        },
                        new
                        {
                            Code = "ETB"
                        },
                        new
                        {
                            Code = "GTQ"
                        },
                        new
                        {
                            Code = "NIO"
                        },
                        new
                        {
                            Code = "TND"
                        },
                        new
                        {
                            Code = "COU"
                        },
                        new
                        {
                            Code = "SGD"
                        },
                        new
                        {
                            Code = "MMK"
                        },
                        new
                        {
                            Code = "COP"
                        },
                        new
                        {
                            Code = "GMD"
                        },
                        new
                        {
                            Code = "MOP"
                        },
                        new
                        {
                            Code = "KWD"
                        },
                        new
                        {
                            Code = "BIF"
                        },
                        new
                        {
                            Code = "PEN"
                        },
                        new
                        {
                            Code = "XOF"
                        },
                        new
                        {
                            Code = "JPY"
                        },
                        new
                        {
                            Code = "MDL"
                        },
                        new
                        {
                            Code = "CLP"
                        },
                        new
                        {
                            Code = "JMD"
                        },
                        new
                        {
                            Code = "XAF"
                        },
                        new
                        {
                            Code = "DKK"
                        },
                        new
                        {
                            Code = "SBD"
                        },
                        new
                        {
                            Code = "IQD"
                        },
                        new
                        {
                            Code = "PKR"
                        },
                        new
                        {
                            Code = "ZMK"
                        },
                        new
                        {
                            Code = "ERN"
                        },
                        new
                        {
                            Code = "ZRN"
                        },
                        new
                        {
                            Code = "XPF"
                        },
                        new
                        {
                            Code = "MGA"
                        },
                        new
                        {
                            Code = "OMR"
                        },
                        new
                        {
                            Code = "SLL"
                        },
                        new
                        {
                            Code = "sel"
                        },
                        new
                        {
                            Code = "BDT"
                        },
                        new
                        {
                            Code = "DJF"
                        },
                        new
                        {
                            Code = "NPR"
                        },
                        new
                        {
                            Code = "VND"
                        },
                        new
                        {
                            Code = "TWD"
                        },
                        new
                        {
                            Code = "FIM"
                        },
                        new
                        {
                            Code = "ARS"
                        },
                        new
                        {
                            Code = "KHR"
                        },
                        new
                        {
                            Code = "SDG"
                        },
                        new
                        {
                            Code = "LVL"
                        },
                        new
                        {
                            Code = "DOP"
                        },
                        new
                        {
                            Code = "MXN"
                        },
                        new
                        {
                            Code = "PYG"
                        },
                        new
                        {
                            Code = "RWF"
                        },
                        new
                        {
                            Code = "SOS"
                        },
                        new
                        {
                            Code = "UYI"
                        },
                        new
                        {
                            Code = "NLG"
                        },
                        new
                        {
                            Code = "PTE"
                        },
                        new
                        {
                            Code = "RUB"
                        },
                        new
                        {
                            Code = "FKI"
                        },
                        new
                        {
                            Code = "ECS"
                        },
                        new
                        {
                            Code = "GHS"
                        },
                        new
                        {
                            Code = "HUF"
                        },
                        new
                        {
                            Code = "KES"
                        },
                        new
                        {
                            Code = "MGF"
                        },
                        new
                        {
                            Code = "MUR"
                        },
                        new
                        {
                            Code = "TJS"
                        },
                        new
                        {
                            Code = "TZS"
                        },
                        new
                        {
                            Code = "CUC"
                        },
                        new
                        {
                            Code = "KYD"
                        },
                        new
                        {
                            Code = "EUR"
                        },
                        new
                        {
                            Code = "AOA"
                        },
                        new
                        {
                            Code = "GIP"
                        },
                        new
                        {
                            Code = "KPW"
                        },
                        new
                        {
                            Code = "MWK"
                        },
                        new
                        {
                            Code = "MAD"
                        },
                        new
                        {
                            Code = "ATS"
                        },
                        new
                        {
                            Code = "KGS"
                        },
                        new
                        {
                            Code = "BSD"
                        },
                        new
                        {
                            Code = "LSL"
                        },
                        new
                        {
                            Code = "MVR"
                        },
                        new
                        {
                            Code = "SRD"
                        },
                        new
                        {
                            Code = "CDF"
                        },
                        new
                        {
                            Code = "FRF"
                        },
                        new
                        {
                            Code = "GRD"
                        },
                        new
                        {
                            Code = "AFN"
                        },
                        new
                        {
                            Code = "LKR"
                        },
                        new
                        {
                            Code = "HTG"
                        },
                        new
                        {
                            Code = "ILS"
                        },
                        new
                        {
                            Code = "QAR"
                        },
                        new
                        {
                            Code = "EGP"
                        },
                        new
                        {
                            Code = "AED"
                        },
                        new
                        {
                            Code = "BWP"
                        },
                        new
                        {
                            Code = "KRW"
                        },
                        new
                        {
                            Code = "MYR"
                        },
                        new
                        {
                            Code = "MZN"
                        },
                        new
                        {
                            Code = "PLN"
                        },
                        new
                        {
                            Code = "BRL"
                        },
                        new
                        {
                            Code = "ITL"
                        },
                        new
                        {
                            Code = "DZD"
                        },
                        new
                        {
                            Code = "BMD"
                        },
                        new
                        {
                            Code = "HKD"
                        },
                        new
                        {
                            Code = "JOD"
                        },
                        new
                        {
                            Code = "AWG"
                        },
                        new
                        {
                            Code = "THB"
                        },
                        new
                        {
                            Code = "UYU"
                        },
                        new
                        {
                            Code = "CAD"
                        },
                        new
                        {
                            Code = "BTN"
                        },
                        new
                        {
                            Code = "MNT"
                        },
                        new
                        {
                            Code = "VUV"
                        },
                        new
                        {
                            Code = "TOP"
                        },
                        new
                        {
                            Code = "VEF"
                        },
                        new
                        {
                            Code = "LBP"
                        },
                        new
                        {
                            Code = "UAK"
                        },
                        new
                        {
                            Code = "ALL"
                        },
                        new
                        {
                            Code = "BBD"
                        },
                        new
                        {
                            Code = "BGN"
                        },
                        new
                        {
                            Code = "GEL"
                        },
                        new
                        {
                            Code = "PGK"
                        },
                        new
                        {
                            Code = "SIT"
                        },
                        new
                        {
                            Code = "IEP"
                        },
                        new
                        {
                            Code = "AMD"
                        },
                        new
                        {
                            Code = "XDR"
                        },
                        new
                        {
                            Code = "CUP"
                        },
                        new
                        {
                            Code = "GYD"
                        },
                        new
                        {
                            Code = "MTL"
                        },
                        new
                        {
                            Code = "NAD"
                        },
                        new
                        {
                            Code = "TPE"
                        },
                        new
                        {
                            Code = "SKK"
                        },
                        new
                        {
                            Code = "MKD"
                        },
                        new
                        {
                            Code = "BAM"
                        },
                        new
                        {
                            Code = "CNY"
                        },
                        new
                        {
                            Code = "SVC"
                        },
                        new
                        {
                            Code = "PHP"
                        },
                        new
                        {
                            Code = "ISK"
                        },
                        new
                        {
                            Code = "SAR"
                        },
                        new
                        {
                            Code = "BZD"
                        },
                        new
                        {
                            Code = "CVE"
                        },
                        new
                        {
                            Code = "BEF"
                        },
                        new
                        {
                            Code = "LTL"
                        },
                        new
                        {
                            Code = "BYN"
                        });
                });

            modelBuilder.Entity("TCO.SNT.Entities.ErrorCode", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.ToTable("ErrorCodes");
                });

            modelBuilder.Entity("TCO.SNT.Entities.EsfUserProfile", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Base64AuthCertificateSecretName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Base64SignCertificateSecretName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSecretName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SignRSAKeyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsernameSecretName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("EsfUserProfiles");
                });

            modelBuilder.Entity("TCO.SNT.Entities.FavoriteProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.ToTable("FavoriteProducts");
                });

            modelBuilder.Entity("TCO.SNT.Entities.FavouriteCurrency", b =>
                {
                    b.Property<string>("CurrencyId")
                        .HasColumnType("nvarchar(3)")
                        .HasMaxLength(3);

                    b.Property<byte>("SortOrder")
                        .HasColumnType("tinyint");

                    b.HasKey("CurrencyId");

                    b.ToTable("FavouriteCurrencies");
                });

            modelBuilder.Entity("TCO.SNT.Entities.FavouriteMeasureUnit", b =>
                {
                    b.Property<int>("MeasureUnitId")
                        .HasColumnType("int");

                    b.HasKey("MeasureUnitId");

                    b.ToTable("FavouriteMeasureUnits");
                });

            modelBuilder.Entity("TCO.SNT.Entities.GroupRole", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GroupId", "Role");

                    b.ToTable("GroupRoles");
                });

            modelBuilder.Entity("TCO.SNT.Entities.GroupTaxpayerStore", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TaxpayerStoreId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GroupId", "TaxpayerStoreId");

                    b.HasIndex("TaxpayerStoreId");

                    b.ToTable("GroupTaxpayerStores");
                });

            modelBuilder.Entity("TCO.SNT.Entities.MeasureUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(16)")
                        .HasMaxLength(16);

                    b.Property<string>("CodeMkei")
                        .HasColumnType("nvarchar(16)")
                        .HasMaxLength(16);

                    b.Property<string>("CodeOkei")
                        .HasColumnType("nvarchar(16)")
                        .HasMaxLength(16);

                    b.Property<string>("CodeTis")
                        .HasColumnType("nvarchar(16)")
                        .HasMaxLength(16);

                    b.Property<DateTimeOffset>("LastUpdateDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NameKz")
                        .IsRequired()
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<string>("NameRu")
                        .IsRequired()
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("MeasureUnits");
                });

            modelBuilder.Entity("TCO.SNT.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("EndDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("ExternalId")
                        .HasColumnType("bigint");

                    b.Property<long>("FixedId")
                        .HasColumnType("bigint");

                    b.Property<long>("FixedParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("GsvsCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GsvsTypeCode")
                        .HasColumnType("int");

                    b.Property<bool?>("IsCanSelect")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExcisable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTwofoldPurpose")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUnique")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsUseInVstore")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsWithdrawal")
                        .HasColumnType("bit");

                    b.Property<int?>("KpvedTypeCode")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdateDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameKz")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameRu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("StartDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("FixedId")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("TCO.SNT.Entities.Settings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("GsvsLastChangeId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("MeasureUnitsLastEventDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("SntUpdatesLastEventDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("SntUpdatesLastSntId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UFormUpdatesLastEventDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GsvsLastChangeId = 0L,
                            MeasureUnitsLastEventDateUtc = new DateTimeOffset(new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            SntUpdatesLastEventDateUtc = new DateTimeOffset(new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            SntUpdatesLastSntId = 0L,
                            UFormUpdatesLastEventDateUtc = new DateTimeOffset(new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("TCO.SNT.Entities.Snt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("CurrencyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DatePaper")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DigitalMarkingNotificationDate")
                        .HasColumnType("date");

                    b.Property<string>("DigitalMarkingNotificationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExportType")
                        .HasColumnType("int");

                    b.Property<long?>("ExternalExportSezCode")
                        .HasColumnType("bigint");

                    b.Property<long?>("ExternalId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ExternalImportSezCode")
                        .HasColumnType("bigint");

                    b.Property<int?>("ImportType")
                        .HasColumnType("int");

                    b.Property<long?>("MptId")
                        .HasColumnType("bigint");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("ReasonPaper")
                        .HasColumnType("int");

                    b.Property<string>("RelatedRegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ShippingDate")
                        .HasColumnType("date");

                    b.Property<int>("SntType")
                        .HasColumnType("int");

                    b.Property<int?>("TransferType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.HasIndex("ExternalId")
                        .IsUnique()
                        .HasFilter("[ExternalId] IS NOT NULL");

                    b.HasIndex("Number");

                    b.HasIndex("SntType");

                    b.ToTable("Snts");
                });

            modelBuilder.Entity("TCO.SNT.Entities.SntAcceptanceGoodsInfo", b =>
                {
                    b.Property<int>("SntId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AcceptanceOrRejectionDate")
                        .HasColumnType("date");

                    b.Property<string>("AcceptanceOrRejectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AcceptanceOrRejectionProducer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanySignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatorSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PowerOfAttorneyDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PowerOfAttorneyNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SntId");

                    b.ToTable("SntAcceptanceGoodsInfo");
                });

            modelBuilder.Entity("TCO.SNT.Entities.SntCarCargoInfo", b =>
                {
                    b.Property<int>("SntId")
                        .HasColumnType("int");

                    b.Property<string>("DriverFio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverTin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StampPrintNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SntId");

                    b.ToTable("SntCarCargoInfo");
                });

            modelBuilder.Entity("TCO.SNT.Entities.SntConsignee", b =>
                {
                    b.Property<int>("SntId")
                        .HasColumnType("int");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NonResident")
                        .HasColumnType("bit");

                    b.Property<string>("Tin")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SntId");

                    b.ToTable("SntConsignees");
                });

            modelBuilder.Entity("TCO.SNT.Entities.SntConsignor", b =>
                {
                    b.Property<int>("SntId")
                        .HasColumnType("int");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NonResident")
                        .HasColumnType("bit");

                    b.Property<string>("Tin")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SntId");

                    b.ToTable("SntConsignors");
                });

            modelBuilder.Entity("TCO.SNT.Entities.SntContract", b =>
                {
                    b.Property<int>("SntId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<string>("DeliveryCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsContract")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TermOfContractPayment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SntId");

                    b.ToTable("SntContracts");
                });

            modelBuilder.Entity("TCO.SNT.Entities.SntCustomer", b =>
                {
                    b.Property<int>("SntId")
                        .HasColumnType("int");

                    b.Property<string>("ActualAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchTin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ExternalStoreId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NonResident")
                        .HasColumnType("bit");

                    b.Property<string>("RegisterCountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReorganizedTin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Statuses")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TaxpayerStoreId")
                        .HasColumnType("int");

                    b.Property<string>("Tin")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("SntId");

                    b.HasIndex("TaxpayerStoreId");

                    b.HasIndex("Tin");

                    b.ToTable("SntCustomers");
                });

            modelBuilder.Entity("TCO.SNT.Entities.SntDocumentInfo", b =>
                {
                    b.Property<int>("SntId")
                        .HasColumnType("int");

                    b.Property<string>("Certificate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatorLogin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatorProjectCode")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatorTin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Errors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderSignerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Signature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SignatureType")
                        .HasColumnType("int");

                    b.Property<bool>("SignatureValid")
                        .HasColumnType("bit");

                    b.Property<string>("SntBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SntId");

                    b.ToTable("SntDocumentInfo");
                });

            modelBuilder.Entity("TCO.SNT.Entities.SntInfo", b =>
                {
                    b.Property<int>("SntId")
                        .HasColumnType("int");

                    b.Property<string>("CancelReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("InputDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastUpdateDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("SntId");

                    b.HasIndex("LastUpdateDateUtc");

                    b.HasIndex("RegistrationNumber");

                    b.HasIndex("Status");

                    b.ToTable("SntInfos");
                });

            modelBuilder.Entity("TCO.SNT.Entities.SntOgdMarksInfo", b =>
                {
                    b.Property<int>("SntId")
                        .HasColumnType("int");

                    b.Property<string>("OgdEmployeeFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("SignDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SntOgdMarksBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SntOgdMarksInfoCertificate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SntOgdMarksInfoSignature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SntOgdMarksInfoSignatureType")
                        .HasColumnType("int");

                    b.Property<bool>("SntOgdMarksInfoSignatureValid")
                        .HasColumnType("bit");

                    b.HasKey("SntId");

                    b.ToTable("SntOgdMarksInfo");
                });

            modelBuilder.Entity("TCO.SNT.Entities.SntOilProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BalanceId")
                        .HasColumnType("int");

                    b.Property<string>("DeclarationNumberForSnt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ExciseAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ExciseRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ExternalMeasureUnitCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GsvsId")
                        .HasColumnType("int");

                    b.Property<int?>("MeasureUnitId")
                        .HasColumnType("int");

                    b.Property<decimal?>("NdsAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("NdsRate")
                        .HasColumnType("int");

                    b.Property<string>("PinCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceWithTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceWithoutTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductNumberInDeclaration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SntId")
                        .HasColumnType("int");

                    b.Property<string>("TnvedCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TruOriginCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BalanceId");

                    b.HasIndex("GsvsId");

                    b.HasIndex("MeasureUnitId");

                    b.HasIndex("SntId");

                    b.ToTable("SntOilProducts");
                });

            modelBuilder.Entity("TCO.SNT.Entities.SntOilSet", b =>
                {
                    b.Property<int>("SntId")
                        .HasColumnType("int");

                    b.Property<string>("KogdOfRecipient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KogdOfSender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductSellerType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalExciseAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalNdsAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalPriceWithTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPriceWithoutTax")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SntId");

                    b.ToTable("SntOilSets");
                });

            modelBuilder.Entity("TCO.SNT.Entities.SntProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BalanceId")
                        .HasColumnType("int");

                    b.Property<string>("DeclarationNumberForSnt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ExciseAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ExciseRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ExternalMeasureUnitCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GsvsId")
                        .HasColumnType("int");

                    b.Property<string>("GtinCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MeasureUnitId")
                        .HasColumnType("int");

                    b.Property<decimal?>("NdsAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("NdsRate")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceWithTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceWithoutTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductNumberInDeclaration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SntId")
                        .HasColumnType("int");

                    b.Property<string>("TnvedCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TruOriginCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BalanceId");

                    b.HasIndex("GsvsId");

                    b.HasIndex("MeasureUnitId");

                    b.HasIndex("SntId");

                    b.ToTable("SntProducts");
                });

            modelBuilder.Entity("TCO.SNT.Entities.SntProductSet", b =>
                {
                    b.Property<int>("SntId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalExciseAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalNdsAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalPriceWithTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPriceWithoutTax")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SntId");

                    b.ToTable("SntProductSets");
                });

            modelBuilder.Entity("TCO.SNT.Entities.SntSeller", b =>
                {
                    b.Property<int>("SntId")
                        .HasColumnType("int");

                    b.Property<string>("ActualAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchTin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ExternalStoreId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NonResident")
                        .HasColumnType("bit");

                    b.Property<string>("RegisterCountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReorganizedTin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Statuses")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TaxpayerStoreId")
                        .HasColumnType("int");

                    b.Property<string>("Tin")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("SntId");

                    b.HasIndex("TaxpayerStoreId");

                    b.HasIndex("Tin");

                    b.ToTable("SntSellers");
                });

            modelBuilder.Entity("TCO.SNT.Entities.SntShippingInfo", b =>
                {
                    b.Property<int>("SntId")
                        .HasColumnType("int");

                    b.Property<string>("BoardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarStateNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarriageNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NonResident")
                        .HasColumnType("bit");

                    b.Property<string>("ShipNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrailerStateNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransportTypes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SntId");

                    b.ToTable("SntShippingInfos");
                });

            modelBuilder.Entity("TCO.SNT.Entities.TaxpayerStore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("AlcoholLicenseId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ExternalDocumentId")
                        .HasColumnType("bigint");

                    b.Property<long>("ExternalId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ExternalParentId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsCooperativeStore")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInherited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsJointStore")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPostingGoods")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPublicStore")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRawMaterials")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LesseeContractDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LesseeContractNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LesseeTin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("OilOvdId")
                        .HasColumnType("bigint");

                    b.Property<string>("PermittedTinList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsiblePersonIin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreTypeCode")
                        .HasColumnType("int");

                    b.Property<string>("Tin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TobaccoOvdId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.ToTable("TaxpayerStores");
                });

            modelBuilder.Entity("TCO.SNT.Entities.UForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("DetailingType")
                        .HasColumnType("int");

                    b.Property<long?>("ExternalId")
                        .HasColumnType("bigint");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("OrderNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReorganizationType")
                        .HasColumnType("int");

                    b.Property<decimal?>("SourceTotalSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("WriteOffReason")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.HasIndex("ExternalId")
                        .IsUnique()
                        .HasFilter("[ExternalId] IS NOT NULL");

                    b.HasIndex("Number");

                    b.HasIndex("TotalSum");

                    b.HasIndex("Type");

                    b.ToTable("UForms");
                });

            modelBuilder.Entity("TCO.SNT.Entities.UFormInfo", b =>
                {
                    b.Property<int>("UFormId")
                        .HasColumnType("int");

                    b.Property<string>("CancelReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatorLogin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("InputDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastUpdateDateUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Signature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SignatureType")
                        .HasColumnType("int");

                    b.Property<bool?>("SignatureValid")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UFormBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UFormId");

                    b.HasIndex("LastUpdateDateUtc");

                    b.HasIndex("RegistrationNumber")
                        .IsUnique()
                        .HasFilter("[RegistrationNumber] IS NOT NULL");

                    b.HasIndex("Status");

                    b.ToTable("UFormInfos");
                });

            modelBuilder.Entity("TCO.SNT.Entities.UFormProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BalanceId")
                        .HasColumnType("int");

                    b.Property<bool?>("CanExport")
                        .HasColumnType("bit");

                    b.Property<int?>("DutyTypeCode")
                        .HasColumnType("int");

                    b.Property<string>("ExternalGsvsCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalMeasureUnitCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ExternalProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("ManufactureOrImportCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManufactureOrImportDocNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MarkingCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MeasureUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginCertificateDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysicalLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PinCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProductFormId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductNameInImportDoc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductNumberInImportDoc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("SourceProductFormId")
                        .HasColumnType("int");

                    b.Property<decimal?>("SpiritPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Sum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TnvedCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BalanceId");

                    b.HasIndex("MeasureUnitId");

                    b.HasIndex("ProductFormId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SourceProductFormId");

                    b.ToTable("UFormProducts");
                });

            modelBuilder.Entity("TCO.SNT.Entities.UFormRecipient", b =>
                {
                    b.Property<int>("UFormId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AgentDocDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AgentDocNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ExternalStoreId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaxpayerStoreId")
                        .HasColumnType("int");

                    b.Property<string>("Tin")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("UFormId");

                    b.HasIndex("TaxpayerStoreId");

                    b.HasIndex("Tin");

                    b.ToTable("UFormRecipients");
                });

            modelBuilder.Entity("TCO.SNT.Entities.UFormSender", b =>
                {
                    b.Property<int>("UFormId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AgentDocDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AgentDocNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ExternalStoreId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaxpayerStoreId")
                        .HasColumnType("int");

                    b.Property<string>("Tin")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("UFormId");

                    b.HasIndex("TaxpayerStoreId");

                    b.HasIndex("Tin");

                    b.ToTable("UFormSenders");
                });

            modelBuilder.Entity("TCO.SNT.Entities.Balance", b =>
                {
                    b.HasOne("TCO.SNT.Entities.MeasureUnit", "MeasureUnit")
                        .WithMany()
                        .HasForeignKey("MeasureUnitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TCO.SNT.Entities.TaxpayerStore", "TaxpayerStore")
                        .WithMany()
                        .HasForeignKey("TaxpayerStoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TCO.SNT.Entities.FavoriteProduct", b =>
                {
                    b.HasOne("TCO.SNT.Entities.Product", "Product")
                        .WithOne()
                        .HasForeignKey("TCO.SNT.Entities.FavoriteProduct", "ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TCO.SNT.Entities.FavouriteCurrency", b =>
                {
                    b.HasOne("TCO.SNT.Entities.Currency", "Currency")
                        .WithOne()
                        .HasForeignKey("TCO.SNT.Entities.FavouriteCurrency", "CurrencyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TCO.SNT.Entities.FavouriteMeasureUnit", b =>
                {
                    b.HasOne("TCO.SNT.Entities.MeasureUnit", "MeasureUnit")
                        .WithOne()
                        .HasForeignKey("TCO.SNT.Entities.FavouriteMeasureUnit", "MeasureUnitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TCO.SNT.Entities.GroupTaxpayerStore", b =>
                {
                    b.HasOne("TCO.SNT.Entities.TaxpayerStore", "TaxpayerStore")
                        .WithMany()
                        .HasForeignKey("TaxpayerStoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TCO.SNT.Entities.SntAcceptanceGoodsInfo", b =>
                {
                    b.HasOne("TCO.SNT.Entities.Snt", "Snt")
                        .WithOne("AcceptanceGoodsInfo")
                        .HasForeignKey("TCO.SNT.Entities.SntAcceptanceGoodsInfo", "SntId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCO.SNT.Entities.SntCarCargoInfo", b =>
                {
                    b.HasOne("TCO.SNT.Entities.Snt", "Snt")
                        .WithOne("CarCargoInfo")
                        .HasForeignKey("TCO.SNT.Entities.SntCarCargoInfo", "SntId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCO.SNT.Entities.SntConsignee", b =>
                {
                    b.HasOne("TCO.SNT.Entities.Snt", "Snt")
                        .WithOne("Consignee")
                        .HasForeignKey("TCO.SNT.Entities.SntConsignee", "SntId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCO.SNT.Entities.SntConsignor", b =>
                {
                    b.HasOne("TCO.SNT.Entities.Snt", "Snt")
                        .WithOne("Consignor")
                        .HasForeignKey("TCO.SNT.Entities.SntConsignor", "SntId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCO.SNT.Entities.SntContract", b =>
                {
                    b.HasOne("TCO.SNT.Entities.Snt", "Snt")
                        .WithOne("Contract")
                        .HasForeignKey("TCO.SNT.Entities.SntContract", "SntId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCO.SNT.Entities.SntCustomer", b =>
                {
                    b.HasOne("TCO.SNT.Entities.Snt", "Snt")
                        .WithOne("Customer")
                        .HasForeignKey("TCO.SNT.Entities.SntCustomer", "SntId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCO.SNT.Entities.TaxpayerStore", "TaxpayerStore")
                        .WithMany()
                        .HasForeignKey("TaxpayerStoreId");
                });

            modelBuilder.Entity("TCO.SNT.Entities.SntDocumentInfo", b =>
                {
                    b.HasOne("TCO.SNT.Entities.Snt", "Snt")
                        .WithOne("DocumentInfo")
                        .HasForeignKey("TCO.SNT.Entities.SntDocumentInfo", "SntId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCO.SNT.Entities.SntInfo", b =>
                {
                    b.HasOne("TCO.SNT.Entities.Snt", "Snt")
                        .WithOne("SntInfo")
                        .HasForeignKey("TCO.SNT.Entities.SntInfo", "SntId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCO.SNT.Entities.SntOgdMarksInfo", b =>
                {
                    b.HasOne("TCO.SNT.Entities.Snt", "Snt")
                        .WithOne("OgdMarksInfo")
                        .HasForeignKey("TCO.SNT.Entities.SntOgdMarksInfo", "SntId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCO.SNT.Entities.SntOilProduct", b =>
                {
                    b.HasOne("TCO.SNT.Entities.Balance", "Balance")
                        .WithMany()
                        .HasForeignKey("BalanceId");

                    b.HasOne("TCO.SNT.Entities.Product", "Gsvs")
                        .WithMany()
                        .HasForeignKey("GsvsId");

                    b.HasOne("TCO.SNT.Entities.MeasureUnit", "MeasureUnit")
                        .WithMany()
                        .HasForeignKey("MeasureUnitId");

                    b.HasOne("TCO.SNT.Entities.Snt", "Snt")
                        .WithMany("OilProducts")
                        .HasForeignKey("SntId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCO.SNT.Entities.SntOilSet", b =>
                {
                    b.HasOne("TCO.SNT.Entities.Snt", "Snt")
                        .WithOne("OilSet")
                        .HasForeignKey("TCO.SNT.Entities.SntOilSet", "SntId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCO.SNT.Entities.SntProduct", b =>
                {
                    b.HasOne("TCO.SNT.Entities.Balance", "Balance")
                        .WithMany()
                        .HasForeignKey("BalanceId");

                    b.HasOne("TCO.SNT.Entities.Product", "Gsvs")
                        .WithMany()
                        .HasForeignKey("GsvsId");

                    b.HasOne("TCO.SNT.Entities.MeasureUnit", "MeasureUnit")
                        .WithMany()
                        .HasForeignKey("MeasureUnitId");

                    b.HasOne("TCO.SNT.Entities.Snt", "Snt")
                        .WithMany("Products")
                        .HasForeignKey("SntId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCO.SNT.Entities.SntProductSet", b =>
                {
                    b.HasOne("TCO.SNT.Entities.Snt", "Snt")
                        .WithOne("ProductSet")
                        .HasForeignKey("TCO.SNT.Entities.SntProductSet", "SntId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCO.SNT.Entities.SntSeller", b =>
                {
                    b.HasOne("TCO.SNT.Entities.Snt", "Snt")
                        .WithOne("Seller")
                        .HasForeignKey("TCO.SNT.Entities.SntSeller", "SntId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCO.SNT.Entities.TaxpayerStore", "TaxpayerStore")
                        .WithMany()
                        .HasForeignKey("TaxpayerStoreId");
                });

            modelBuilder.Entity("TCO.SNT.Entities.SntShippingInfo", b =>
                {
                    b.HasOne("TCO.SNT.Entities.Snt", "Snt")
                        .WithOne("ShippingInfo")
                        .HasForeignKey("TCO.SNT.Entities.SntShippingInfo", "SntId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCO.SNT.Entities.UFormInfo", b =>
                {
                    b.HasOne("TCO.SNT.Entities.UForm", "UForm")
                        .WithOne("UFormInfo")
                        .HasForeignKey("TCO.SNT.Entities.UFormInfo", "UFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCO.SNT.Entities.UFormProduct", b =>
                {
                    b.HasOne("TCO.SNT.Entities.Balance", "Balance")
                        .WithMany()
                        .HasForeignKey("BalanceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TCO.SNT.Entities.MeasureUnit", "MeasureUnit")
                        .WithMany()
                        .HasForeignKey("MeasureUnitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TCO.SNT.Entities.UForm", "ProductForm")
                        .WithMany("Products")
                        .HasForeignKey("ProductFormId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TCO.SNT.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TCO.SNT.Entities.UForm", "SourceProductForm")
                        .WithMany("SourceProducts")
                        .HasForeignKey("SourceProductFormId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("TCO.SNT.Entities.UFormRecipient", b =>
                {
                    b.HasOne("TCO.SNT.Entities.TaxpayerStore", "TaxpayerStore")
                        .WithMany()
                        .HasForeignKey("TaxpayerStoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TCO.SNT.Entities.UForm", "UForm")
                        .WithOne("Recipient")
                        .HasForeignKey("TCO.SNT.Entities.UFormRecipient", "UFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCO.SNT.Entities.UFormSender", b =>
                {
                    b.HasOne("TCO.SNT.Entities.TaxpayerStore", "TaxpayerStore")
                        .WithMany()
                        .HasForeignKey("TaxpayerStoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TCO.SNT.Entities.UForm", "UForm")
                        .WithOne("Sender")
                        .HasForeignKey("TCO.SNT.Entities.UFormSender", "UFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
